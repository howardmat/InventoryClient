import { Observable, BehaviorSubject } from 'rxjs';

import { ApiPostResponseModel } from '../app/shared/models/api-post-response.model';
import { Api } from '../services/api.interface';
import { State } from '../services/state.interface';
import { IdModel } from '../models/id-model.interface';

export abstract class GenericFacade<T extends IdModel> {
  hasLoaded: boolean = false;
  delayedError$: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);
  delayedSave$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  constructor(
    protected api: Api<T>,
    protected state: State<T>
  ) { }

  isUpdating$(): Observable<boolean> {
    return this.state.isUpdating$();
  }

  getItems$(): Observable<T[]> {
    return this.state.getItems$();
  }

  getItems(): T[] {
    return this.state.getItems();
  }

  getItem(id: string): T {
    return this.state.getItem(id);
  }

  abstract loadItems(): Observable<T[]>;

  addItem(item: T) {
    this.state.setUpdating(true);

    this.state.addItem(item);
    this.api.createItem(item).subscribe(
      (resp: ApiPostResponseModel) => {
        // success callback - we have id generated by the server, let's update the state
        this.state.updateItemId(item, {
          ...item,
          id: resp.name
        });
        this.delayedSave$.next(true);
        this.state.setUpdating(false);
      },
      (error: any) => {
        console.log(error);

        // error callback - we need to rollback the state change
        this.state.removeItem(item);
        this.delayedError$.next('Adding record failed. Changes have been rolled back.');
        this.state.setUpdating(false);
      }
    );
  }

  updateItem(item: T) {
    this.state.setUpdating(true);

    // get current object
    const existingItem = this.getItem(item.id);

    this.state.updateItem(item);
    this.api.updateItem(item).subscribe(
      () => {
        this.delayedSave$.next(true);
        this.state.setUpdating(false);
      },
      error => {
        console.log(error);

        // restore the previous object 
        this.state.updateItem(existingItem);
        this.delayedError$.next('Updating record failed. Changes have been rolled back.');
        this.state.setUpdating(false);
      }
    );
  }

  deleteItem(item: T) {
    this.state.setUpdating(true);

    this.api.deleteItem(item).subscribe(
      () => {
        this.state.removeItem(item);
        this.state.setUpdating(false);
      },
      error => {
        console.log(error);

        this.delayedError$.next('Deleting record failed. Changes have been rolled back.');
        this.state.setUpdating(false);
      }
    );
  }
}